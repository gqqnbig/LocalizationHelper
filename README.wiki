[https://ci.appveyor.com/project/gqqnbig/localizationhelper [[File:https://ci.appveyor.com/api/projects/status/9quhnn68u9ao408p?svg=true|Build status]]]

'''Localization Helper''' is a general tool that help translate file from one language to another. It's able to translate .NET .resx files, [https://autohotkey.com/ AutoHotKey] comments, [http://store.steampowered.com/app/394360/Hearts_of_Iron_IV/ Hearts of Iron] mod localization files, etc. as long as given correct pattern that extracts resource key (which is optional) and value.

Localization Helper is optimized to be used as Git hook.

== Examples ==

=== Localize .NET .resx files ===

Install the following TortoiseGit start-commit hook

<pre class="PowerShell">cd $args[2]

# Localization

$status = git status -s
$modifiedResources = echo $status | Select-String &quot;M (.+)(?&lt;!\.\w\w)\.resx&quot; #doesn't end with like pl.resx
Foreach( $modifiedResource in $modifiedResources)
{
    $relativePath = $modifiedResource.Matches[0].Groups[1].Value
    echo $relativePath
    if($status -match [Regex]::Escape(&quot;$($relativePath).pl.resx&quot;))
    {
        Write-Host &quot;Skip translating because $($relativePath).pl.resx has been modified.&quot;
        continue
    }


    $sourceFile= -Join($relativePath,".resx")
    $targetFile= -Join($relativePath,".pl.resx")
    $originalName= -Join($relativePath,".resx")
    # U1: show 1 line of context
    git diff -U1 $originalName |
    Translator.exe --keyValuePattern """(?<=\<data name=""""(?<k>{0})""""\s+xml[^>]+>\s*\n\s*\<value\>).+(?=\<\/value\>)"""   `
             --keyPattern \w+   `
             --source "$($sourceFile):en" `
             --target "$($targetFile):pl" `
             --apiToken  ???


    echo "`n$($relativePath).pl.resx is translated by Google" | Out-File  $args[1] -Encoding ascii -Append

}
</pre>

=== Localize AutoHotKey comments ===

<pre class="PowerShell">cd $args[2]

# Localization

# Compatible with Unicode file names
[Console]::OutputEncoding = [Text.Encoding]::UTF8

$status = git status -s
$modifiedResources = echo $status | Select-String "M 鼠标配合-工作.ahk" #doesn't end with like pl.ahk
Foreach( $modifiedResource in $modifiedResources)
{
    $relativePath = $modifiedResource.Matches[0].Groups[1].Value
    echo $relativePath
    if($status -match [Regex]::Escape("work.en.ahk"))
    {
        Write-Host "Skip translating because work.en.ahk has been modified."
        continue
    }



    $originalName= -Join($relativePath,".resx")
    git diff $originalName |
    Translator.exe --keyValuePattern "(?<=;[\s-[\r\n]]*)[^\r\n]+"  `
                   --source 鼠标配合-工作.ahk:zh `
                   --target work.en.ahk:en `
                   --apiToken  ???


    echo "`nwork.en.ahk is translated by Google" | Out-File  $args[1] -Encoding ascii -Append

}
</pre>
This script translates comments in 鼠标配合-工作.ahk in Chinese to English and write to work.en.ahk.

=== Localize Hearts of Icon localisation files ===

<pre class="PowerShell">cd $args[2]
 
# Localization
 
$status = git status -s
$modifiedResources = echo $status | Select-String "M localisation/(.+_l_)english.yml";
Foreach( $modifiedResource in $modifiedResources)
{
    $relativePath = $modifiedResource.Matches[0].Groups[1].Value
    echo $relativePath
    if($status -match [Regex]::Escape("$($relativePath)french.yml"))
    {
        Write-Host "Skip translating because $($relativePath)french.yml has been modified“
        continue
    }
 
 
    $sourceFile="localisation/$($relativePath)english.yml"
    $targetFile="localisation/$($relativePath)french.yml"
    # U1: show 1 line of context
    git diff -U1 $sourceFile |
    Translator.exe --keyValuePattern "(?<=(?<k&>{0}):0\s+"").+(?=""\s*$)" `
             --keyPattern "[\w_]+\.\d+\.[td]"   `
             --source "$($sourceFile):zh-cn" `
             --target "$($targetFile):fr" `
             --apiToken  ???
 
 
    echo "`n$($targetFile) is translated by Google" | Out-File  $args[1] -Encoding ascii -Append
 
}
</pre>
This script translates text in localisation/.+_l_english.yml in Chinese to French and write to localisation/.+_l_french.yml.

== Command Line Options ==

=== keyPattern ===

It's optional. It specifies the pattern of key in [https://docs.microsoft.com/dotnet/standard/base-types/regular-expression-language-quick-reference .NET regular expression]. This option is used when the text in source files are in key value pairs.

If the option is omitted, <code>keyValuePattern</code> becomes ''keyless'' pattern.

=== keyValuePattern ===

If <code>keyPattern</code> is specified, this option must have <code>{0}</code> placeholder, which is used to insert <code>keyPattern</code>.

This pattern is executed with [https://msdn.microsoft.com/library/system.text.regularexpressions.regexoptions(v=vs.110).aspx RegexOptions.Multiline]. A typical <code>keyValuePattern</code> has ''Zero-width positive lookahead assertion'' and _Zero-width positiv
